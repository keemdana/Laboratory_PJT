<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/jee
            http://www.springframework.org/schema/jee/spring-jee.xsd">
    <description>
        <!--
          ~ Copyright (c) 2021 Vertex ID., KOREA
          ~ All rights reserved.
          ~
          ~ This software is the confidential
          ~ and proprietary information of emFrontier.com ("Confidential Information").
          ~ You shall not disclose such Confidential Information
          ~ and shall use it only in accordance with
          ~ the terms of the license agreement you entered into
          ~ with Vertex ID. Networks
          -->
        <![CDATA[
            Transaction 설정

            - JNDI/JDBC 설정
            - MyBatis 설정
            - TransactionManager 설정
            - 공용 DAO, 공용 DAO Function 설정

            [JNDI 설정]
                1. WAS에 JNDI 설정
                    ex) Tomcat, MSSQL 일 경우
                    <Resource name="jdbc/jayu" auth="Container" type="javax.sql.DataSource"
                          maxActive="1000" maxIdle="10" maxWait="1000"
                          username="..."
                          password="..."
                          driverClassName="com.microsoft.sqlserver.jdbc.SQLServerDriver"
                          validationQuery="select 1"
                          url="jdbc:sqlserver://127.0.0.1:1412;database=TEST" />

                2. WEB.xml에 resource-ref 관련 설정
                    ex) <resource-ref>
                            <res-ref-name>jdbc/jayu</res-ref-name>
                            <res-type>javax.sql.DataSource</res-type>
                            <res-auth>Container</res-auth>
                        </resource-ref>

                3. JNDI 설정 주석을 해제
                4. JDBC 설정 주석

            [JDBC 설정]
                1. confJDBC.~.xml 에 JDBC 정보 설정
                2. JDBC 설정 주석을 해제
                3. JNDI 설정 주석
        ]]>
    </description>

    <!-- 어노테이션 기반 트랜잭션 설정 -->
    <tx:annotation-driven/>

    <!-- JNDI 설정 -->
    <!-- import를 사용할경우 아래 주석 해제 -->
    <!--<import resource="confJNDI.xml"/>-->
    <!-- <jee:jndi-lookup id="dataSource" jndi-name="jdbc/jayu"
                     expected-type="javax.sql.DataSource"/> -->

    <!-- JDBC 설정 -->
    <import resource="confJDBC.db.xml"/>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- Mybatis 설정 -->
    <bean id="sqlSessionFactoryBean"
          class="com.vertexid.mybatis.RefreshableSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation"
                  value="classpath:com/vertexid/mybatis/conf/mybatis-config.xml"/>
        <property name="mapperLocations">
            <array>
                <value>classpath:com/vertexid/mybatis/mapper/Common.xml</value>
                <value>classpath:com/vertexid/mybatis/mapper/*/*/*/*.xml</value>
                <value>classpath:com/vertexid/mybatis/mapper/*/*/*/*/*.xml</value>
            </array>
        </property>
    </bean>

    <!-- 일반 세션 -->
    <bean id="sqlSessionTemplate"
          class="org.mybatis.spring.SqlSessionTemplate"
          destroy-method="clearCache">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
    </bean>

    <!-- batch 세션 -->
    <bean id="batchSqlSessionTemplate"
          class="org.mybatis.spring.SqlSessionTemplate"
          destroy-method="clearCache">
        <constructor-arg index="0" ref="sqlSessionFactoryBean"/>
        <constructor-arg index="1" value="BATCH"/>
    </bean>

    <!--
      MyBatis SqlSessionDaoSupport 사용
      -->
    <!-- DAO Function 설정 -->
    <bean id="myBatisDAOFunction"
          class="com.vertexid.mybatis.MyBatisDAOFunction">
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate"/>
    </bean>

    <!-- DAO Function 설정(batch 세션) -->
    <bean id="myBatisBatchDAOFunction"
          class="com.vertexid.mybatis.MyBatisDAOFunction">
        <property name="sqlSessionTemplate" ref="batchSqlSessionTemplate"/>
    </bean>

    <!-- 공용DAO -->
    <bean id="cmmDAO" class="com.vertexid.viself.base.CmmDAO">
        <property name="myBatis" ref="myBatisDAOFunction"/>
    </bean>

    <!-- 공용DAO(batch 세션) -->
    <bean id="cmmBatchDAO" class="com.vertexid.viself.base.CmmDAO">
        <property name="myBatis" ref="myBatisBatchDAOFunction"/>
    </bean>

    <!-- 다중 DB TEST -->
    <import resource="confJDBC.test.xml"/>

    <bean id="transactionManager1"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource1"/>
    </bean>

    <!-- Mybatis 설정 -->
    <bean id="sqlSessionFactoryBean1"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource1"/>
        <property name="configLocation"
                  value="classpath:com/vertexid/mybatis/conf/mybatis-config.xml"/>
        <property name="mapperLocations">
            <array>
                <value>classpath:com/vertexid/mybatis/mapper/Common.xml</value>
                <value>classpath:com/vertexid/mybatis/mapper/viself/mssql/hr/UserMng.xml</value>
            </array>
        </property>
    </bean>

    <!-- 일반 세션 -->
    <bean id="sqlSessionTemplate1"
          class="org.mybatis.spring.SqlSessionTemplate"
          destroy-method="clearCache">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean1"/>
    </bean>

    <!-- batch 세션 -->
    <bean id="batchSqlSessionTemplate1"
          class="org.mybatis.spring.SqlSessionTemplate"
          destroy-method="clearCache">
        <constructor-arg index="0" ref="sqlSessionFactoryBean1"/>
        <constructor-arg index="1" value="BATCH"/>
    </bean>

    <!--
      MyBatis SqlSessionDaoSupport 사용
      -->
    <!-- DAO Function 설정 -->
    <bean id="myBatisDAOFunction1"
          class="com.vertexid.mybatis.MyBatisDAOFunction">
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate1"/>
    </bean>

    <!-- DAO Function 설정(batch 세션) -->
    <bean id="myBatisBatchDAOFunction1"
          class="com.vertexid.mybatis.MyBatisDAOFunction">
        <property name="sqlSessionTemplate" ref="batchSqlSessionTemplate1"/>
    </bean>

    <!-- 공용DAO -->
    <bean id="cmmDAO1" class="com.vertexid.viself.base.CmmDAO">
        <property name="myBatis" ref="myBatisDAOFunction1"/>
    </bean>

    <!-- 공용DAO(batch 세션) -->
    <bean id="cmmBatchDAO1" class="com.vertexid.viself.base.CmmDAO">
        <property name="myBatis" ref="myBatisBatchDAOFunction1"/>
    </bean>

</beans>